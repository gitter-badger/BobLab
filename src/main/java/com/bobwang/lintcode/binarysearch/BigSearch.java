package com.bobwang.lintcode.binarysearch;

/**
 * Created by cwang on 3/6/17.
 */
public class BigSearch {

    public int searchBigSortedArray(ArrayReader reader, int target) {
        // write your code here
        if (reader.get(0) == target) {
            return 0;
        }
        if (target == Integer.MAX_VALUE) {
            return -1;
        }
        int k = 1;
        while (target != Integer.MAX_VALUE && reader.get(k) < target) {
            k = 2 * k;
        }

        if (k <= 4) {
            for (int i = 0; i <= k; i++) {
                if (reader.get(i) == target) {
                    return i;
                }
            }
        }
        int start = k / 2;
        int end = k;
        int mid = 0;
        while (start != mid && end!=mid) {
            if (reader.get(mid) >= target) {
                end = mid;
            } else {
                start = mid;
            }
            mid = start + (end - start) / 2;
            if (reader.get(mid) == target && reader.get(mid - 1) < target) {
                return mid;
            }else if(reader.get(mid) < target && reader.get(mid+1) == target){
                return mid+1;
            }
        }
        return -1;
    }

    static class ArrayReader {
        int[] array = new int[]{2, 3, 3, 4, 5, 6, 6, 6, 6, 6, 7, 7, 8, 9, 9, 9, 10, 11, 11, 12, 12, 13, 14, 15, 16, 16, 16, 17, 17, 17, 20, 20, 21, 22, 23, 23, 24, 25, 26, 27, 27, 34, 34, 36, 36, 38, 38, 38, 40, 41, 42, 44, 46, 47, 48, 49, 49, 51, 53, 54, 57, 58, 59, 59, 60, 61, 61, 61, 62, 63, 64, 65, 66, 66, 67, 71, 72, 74, 74, 74, 75, 76, 77, 78, 78, 79, 83, 85, 85, 89, 89, 93, 93, 95, 95, 95, 96, 97, 97, 99, 99, 100, 101, 101, 101, 102, 105, 105, 106, 108, 108, 111, 113, 114, 116, 117, 117, 117, 118, 119, 120, 122, 123, 125, 126, 126, 127, 127, 129, 129, 130, 131, 131, 133, 134, 135, 135, 135, 139, 140, 140, 143, 143, 143, 144, 149, 149, 150, 150, 151, 152, 152, 153, 154, 154, 156, 156, 157, 160, 161, 161, 161, 165, 170, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 181, 182, 184, 184, 186, 187, 187, 189, 190, 192, 194, 196, 197, 198, 199, 199, 200, 201, 203, 203, 204, 204, 204, 204, 204, 204, 205, 207, 208, 209, 209, 210, 210, 211, 211, 212, 212, 215, 216, 216, 217, 223, 224, 224, 224, 224, 225, 227, 227, 229, 229, 230, 231, 235, 235, 235, 236, 237, 238, 238, 238, 238, 240, 240, 241, 241, 242, 244, 244, 245, 246, 249, 249, 249, 250, 251, 253, 254, 256, 256, 257, 257, 260, 261, 261, 263, 267, 268, 268, 269, 270, 270, 270, 270, 271, 271, 272, 273, 274, 275, 276, 276, 277, 279, 280, 282, 282, 284, 284, 286, 286, 288, 289, 289, 291, 292, 293, 298, 300, 301, 301, 302, 302, 304, 304, 304, 305, 306, 307, 307, 308, 309, 310, 310, 310, 310, 311, 312, 314, 314, 315, 316, 316, 316, 316, 317, 317, 319, 320, 320, 321, 321, 322, 325, 327, 327, 327, 327, 329, 329, 330, 331, 333, 334, 336, 337, 337, 338, 339, 342, 344, 345, 346, 346, 349, 350, 353, 353, 353, 355, 355, 355, 356, 356, 357, 357, 361, 363, 363, 364, 366, 366, 367, 367, 370, 370, 371, 372, 374, 375, 377, 380, 380, 380, 382, 383, 383, 384, 386, 386, 387, 388, 388, 390, 390, 391, 391, 392, 393, 395, 396, 396, 397, 397, 397, 398, 401, 403, 404, 405, 408, 408, 408, 408, 409, 410, 411, 411, 411, 414, 415, 415, 417, 417, 417, 417, 418, 419, 420, 421, 422, 422, 423, 423, 426, 426, 428, 428, 430, 431, 431, 431, 434, 436, 437, 438, 438, 438, 441, 442, 444, 446, 447, 449, 450, 451, 452, 454, 454, 454, 456, 456, 457, 457, 459, 459, 463, 464, 465, 466, 466, 466, 467, 468, 468, 468, 471, 473, 475, 475, 475, 476, 478, 478, 478, 479, 481, 481, 483, 483, 484, 486, 488, 488, 489, 490, 491, 493, 493, 494, 495, 495, 496, 496, 496, 501, 502, 503, 503, 504, 504, 505, 506, 506, 506, 507, 507, 509, 511, 511, 511, 512, 514, 514, 515, 516, 517, 517, 517, 518, 518, 519, 520, 521, 521, 526, 527, 527, 528, 530, 531, 532, 532, 534, 535, 539, 540, 542, 542, 542, 544, 544, 545, 545, 546, 546, 547, 548, 550, 551, 552, 553, 555, 557, 559, 560, 561, 561, 561, 561, 561, 564, 564, 565, 566, 566, 569, 569, 569, 571, 572, 572, 573, 578, 578, 578, 578, 580, 581, 581, 582, 583, 586, 586, 587, 588, 589, 590, 591, 591, 592, 593, 593, 594, 596, 597, 599, 599, 599, 600, 601, 601, 603, 604, 605, 605, 606, 606, 607, 607, 607, 609, 609, 611, 611, 611, 616, 618, 621, 622, 623, 624, 625, 627, 629, 629, 629, 630, 632, 632, 634, 635, 635, 635, 636, 636, 637, 637, 638, 640, 640, 641, 641, 641, 642, 644, 648, 648, 648, 649, 651, 652, 654, 654, 655, 656, 656, 657, 657, 657, 658, 661, 662, 662, 663, 665, 665, 665, 667, 667, 667, 668, 669, 670, 671, 674, 675, 675, 676, 676, 676, 679, 680, 680, 681, 683, 685, 686, 686, 687, 689, 690, 691, 691, 692, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 708, 709, 710, 710, 711, 712, 715, 715, 716, 717, 718, 719, 720, 721, 723, 724, 724, 724, 724, 725, 734, 735, 736, 737, 737, 741, 742, 742, 743, 744, 744, 744, 750, 751, 751, 752, 755, 758, 758, 758, 758, 759, 761, 761, 762, 763, 763, 764, 765, 765, 766, 766, 768, 770, 770, 771, 771, 772, 773, 774, 774, 776, 776, 778, 778, 781, 781, 781, 781, 782, 782, 783, 785, 786, 788, 788, 789, 789, 789, 789, 789, 789, 790, 792, 793, 796, 796, 796, 797, 797, 798, 800, 800, 802, 803, 804, 804, 805, 806, 806, 807, 809, 810, 810, 813, 814, 816, 818, 820, 822, 823, 823, 823, 824, 826, 827, 829, 829, 830, 831, 832, 833, 834, 836, 836, 837, 837, 838, 841, 842, 843, 844, 844, 845, 845, 846, 848, 848, 849, 849, 850, 850, 851, 852, 853, 853, 855, 855, 855, 858, 859, 860, 862, 862, 862, 863, 863, 863, 864, 864, 865, 866, 867, 867, 868, 869, 869, 870, 875, 877, 878, 880, 883, 886, 886, 888, 890, 891, 893, 896, 897, 897, 898, 899, 899, 900, 900, 902, 902, 902, 902, 903, 904, 908, 908, 909, 909, 910, 911, 912, 917, 919, 919, 920, 921, 921, 922, 924, 925, 925, 925, 926, 927, 929, 929, 930, 930, 931, 933, 934, 934, 935, 935, 935, 936, 936, 937, 937, 938, 939, 940, 940, 941, 941, 942, 942, 943, 944, 944, 945, 946, 946, 947, 949, 950, 951, 954, 956, 959, 959, 961, 962, 963, 965, 967, 967, 968, 969, 971, 971, 971, 974, 976, 977, 977, 978, 979, 981, 983, 985, 985, 985, 988, 988, 989, 989, 990, 990, 991, 991, 991, 991, 992, 993, 994, 996, 996, 998, 998, 999, 999};

        int get(int k) {
            if (k > array.length - 1)
                return Integer.MAX_VALUE;
            return array[k];
        }
    }

    public static void main(String[] args) {
        BigSearch bs = new BigSearch();
        int i = bs.searchBigSortedArray(new ArrayReader(), 558);
        System.out.println(i);
    }
}
